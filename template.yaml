AWSTemplateFormatVersion: '2010-09-09'
#testcase
Parameters:
  Region:
    Type: String
    Default: us-east-1
    Description: The AWS region in which to create resources.

  AccountId:
    Type: String
    Default: 548616401217
    Description: The AWS account ID where the resources will be created.
      
  Env:
    Type: String
    Default: dev
    Description: The AWS account ID where the resources will be created.
    

Resources:
  MyLambdaFunction1:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: ${Env}-my-test-function
      Handler: lambda_function.lambda_handler
      Role: !GetAtt MyLambdaRole.Arn
      Runtime: python3.9
      Environment:
        Variables:
          env: ${Env}
          
  

  MyLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: MyLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'



  MyRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: ${Env}-my-test-restapi
      EndpointConfiguration:
        Types:
          - REGIONAL


  MyResourceA:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref MyRestApi
      ParentId: !GetAtt MyRestApi.RootResourceId
      PathPart: 'hello'
  
  MyResourceB:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref MyRestApi
      ParentId: !GetAtt MyRestApi.RootResourceId
      PathPart: 'world'

  MyMethodA1:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref MyRestApi
      ResourceId: !Ref MyResource1
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS  # Set authorization type to COGNITO_USER_POOLS
      AuthorizerId: !Ref MyAuthorizer  # Set the ID of the authorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction1.Arn}/invocations'
        
  MyMethodA2:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref MyRestApi
      ResourceId: !Ref MyResource1
      HttpMethod: DELETE
      AuthorizationType: COGNITO_USER_POOLS  # Set authorization type to COGNITO_USER_POOLS
      AuthorizerId: !Ref MyAuthorizer  # Set the ID of the authorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction1.Arn}/invocations'
        
  
  MyMethodB1:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref MyRestApi
      ResourceId: !Ref MyResource2
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS  # Set authorization type to COGNITO_USER_POOLS
      AuthorizerId: !Ref MyAuthorizer  # Set the ID of the authorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction2.Arn}/invocations'
        
  MyMethodB2:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref MyRestApi
      ResourceId: !Ref MyResource2
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS  # Set authorization type to COGNITO_USER_POOLS
      AuthorizerId: !Ref MyAuthorizer  # Set the ID of the authorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: PATCH
        Uri: !Sub 'arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction2.Arn}/invocations'

  MyAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:
      Name: my-cognito-authorizer
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref MyRestApi
      ProviderARNs:
        - !Sub arn:aws:cognito-idp:${Region}:${AccountId}:userpool/us-east-1_t4ca30NhA    #${UserPoolId}

  MyDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - MyMethodA1
      - MyMethodA2
      - MyMethodB1
      - MyMethodB2
    Properties:
      RestApiId: !Ref MyRestApi

  MyStage1:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      RestApiId: !Ref MyRestApi
      DeploymentId: !Ref MyDeployment
      StageName: ${Env}
      Variables:
        env: ${Env}
        

  MyLambdaPermission1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref MyLambdaFunction1
      Principal: apigateway.amazonaws.com
      SourceArn: 
        - !Sub 'arn:aws:execute-api:${Region}:${AccountId}:${MyRestApi}/GET/hello'
        - !Sub 'arn:aws:execute-api:${Region}:${AccountId}:${MyRestApi}/GET/world'
     
